{"ast":null,"code":"var _jsxFileName = \"/home/gala/gala/my/react/test/src/Components/ModalBlock.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nconst appRoot = document.getElementById('app-root');\nconst modalRoot = document.getElementById('modal-root'); // Let's create a Modal component that is an abstraction around\n// the portal API.\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props); // Create a div that we'll render the modal into. Because each\n    // Modal component has its own element, we can render multiple\n    // modal components into the modal container.\n\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // Append the element into the DOM on mount. We'll render\n    // into the modal container element (see the HTML tab).\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    // Remove the element from the DOM when we unmount\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    // Use a portal to render the children into the element\n    return ReactDOM.createPortal( // Any valid React child: JSX, strings, arrays, etc.\n    this.props.children, // A DOM element\n    this.el);\n  }\n\n} // The Modal component is a normal React component, so we can\n// render it wherever we like without needing to know that it's\n// implemented with portals.\n\n\nclass ModalBlock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false\n    };\n    this.handleShow = this.handleShow.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n  }\n\n  handleShow() {\n    this.setState({\n      showModal: true\n    });\n  }\n\n  handleHide() {\n    this.setState({\n      showModal: false\n    });\n  }\n\n  render() {\n    // Show a Modal on click.\n    // (In a real app, don't forget to use ARIA attributes\n    // for accessibility!)\n    const modal = this.state.showModal ? /*#__PURE__*/React.createElement(Modal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, \"With a portal, we can render content into a different part of the DOM, as if it were any other React child.\"), \"This is being rendered inside the #modal-container div.\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleHide,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, \"Hide modal\"))) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app-root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"modal-root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    })), \"This div has overflow: hidden.\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleShow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, \"Show modal\"), modal);\n  }\n\n}\n\nexport default ModalBlock;","map":{"version":3,"sources":["/home/gala/gala/my/react/test/src/Components/ModalBlock.jsx"],"names":["React","ReactDOM","appRoot","document","getElementById","modalRoot","Modal","Component","constructor","props","el","createElement","componentDidMount","appendChild","componentWillUnmount","removeChild","render","createPortal","children","ModalBlock","state","showModal","handleShow","bind","handleHide","setState","modal"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB;AACA,MAAMC,SAAS,GAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAlB,C,CAEA;AACA;;AACA,MAAME,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;AACA;;AACA,SAAKC,EAAL,GAAUP,QAAQ,CAACQ,aAAT,CAAuB,KAAvB,CAAV;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACA;AACAP,IAAAA,SAAS,CAACQ,WAAV,CAAsB,KAAKH,EAA3B;AACH;;AAEDI,EAAAA,oBAAoB,GAAG;AACnB;AACAT,IAAAA,SAAS,CAACU,WAAV,CAAsB,KAAKL,EAA3B;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL;AACA,WAAOf,QAAQ,CAACgB,YAAT,EACH;AACA,SAAKR,KAAL,CAAWS,QAFR,EAGH;AACA,SAAKR,EAJF,CAAP;AAMH;;AA5B+B,C,CA+BpC;AACA;AACA;;;AACA,MAAMS,UAAN,SAAyBnB,KAAK,CAACO,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKW,KAAL,GAAa;AAACC,MAAAA,SAAS,EAAE;AAAZ,KAAb;AAEA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDD,EAAAA,UAAU,GAAG;AACT,SAAKG,QAAL,CAAc;AAACJ,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACH;;AAEDG,EAAAA,UAAU,GAAG;AACT,SAAKC,QAAL,CAAc;AAACJ,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACH;;AAEDL,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA,UAAMU,KAAK,GAAG,KAAKN,KAAL,CAAWC,SAAX,gBACV,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHADJ,0EAMI;AAAQ,MAAA,OAAO,EAAE,KAAKG,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,CADJ,CADU,GAWV,IAXJ;AAaA,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAK,MAAA,EAAE,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,iDAMI;AAAQ,MAAA,OAAO,EAAE,KAAKF,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,EAOKI,KAPL,CADJ;AAWH;;AA7CoC;;AAgDzC,eAAeP,UAAf","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst appRoot = document.getElementById('app-root');\nconst modalRoot = document.getElementById('modal-root');\n\n// Let's create a Modal component that is an abstraction around\n// the portal API.\nclass Modal extends React.Component {\n    constructor(props) {\n        super(props);\n        // Create a div that we'll render the modal into. Because each\n        // Modal component has its own element, we can render multiple\n        // modal components into the modal container.\n        this.el = document.createElement('div');\n    }\n\n    componentDidMount() {\n        // Append the element into the DOM on mount. We'll render\n        // into the modal container element (see the HTML tab).\n        modalRoot.appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        // Remove the element from the DOM when we unmount\n        modalRoot.removeChild(this.el);\n    }\n\n    render() {\n        // Use a portal to render the children into the element\n        return ReactDOM.createPortal(\n            // Any valid React child: JSX, strings, arrays, etc.\n            this.props.children,\n            // A DOM element\n            this.el,\n        );\n    }\n}\n\n// The Modal component is a normal React component, so we can\n// render it wherever we like without needing to know that it's\n// implemented with portals.\nclass ModalBlock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {showModal: false};\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleHide = this.handleHide.bind(this);\n    }\n\n    handleShow() {\n        this.setState({showModal: true});\n    }\n\n    handleHide() {\n        this.setState({showModal: false});\n    }\n\n    render() {\n        // Show a Modal on click.\n        // (In a real app, don't forget to use ARIA attributes\n        // for accessibility!)\n        const modal = this.state.showModal ? (\n            <Modal>\n                <div className=\"modal\">\n                    <div>\n                        With a portal, we can render content into a different\n                        part of the DOM, as if it were any other React child.\n                    </div>\n                    This is being rendered inside the #modal-container div.\n                    <button onClick={this.handleHide}>Hide modal</button>\n                </div>\n            </Modal>\n        ) : null;\n\n        return (\n            <div className=\"app\">\n                <div>\n                    <div id=\"app-root\"></div>\n                    <div id=\"modal-root\"></div>\n                </div>\n                This div has overflow: hidden.\n                <button onClick={this.handleShow}>Show modal</button>\n                {modal}\n            </div>\n        );\n    }\n}\n\nexport default ModalBlock;\n"]},"metadata":{},"sourceType":"module"}